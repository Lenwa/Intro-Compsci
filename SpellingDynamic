/*Author Kyle
Images folder can be found at:
https://drive.google.com/open?id=0BwW8gHWb2VOvNXFIMVRJWWl5ME0
Icon Folder can be found at:
https://drive.google.com/open?id=0BwW8gHWb2VOvSEZPeDBXZ0pYbHM
Just save both folders in the same folder, otherwise
need to link the correct path to wherever you saved them
*/

import java.io.File;
import javax.swing.*;
import java.util.Random;
import java.util.ArrayList;
import java.util.Arrays;
import java.awt.event.*;
import java.awt.*;
import javax.swing.plaf.FontUIResource;

public class Spelling {
    
    public static void main(String[] args) {
        //changes font on all OptionPanes
        javax.swing.UIManager.put("OptionPane.messageFont", new FontUIResource
        (new Font("Droid Serif", Font.PLAIN, 25)));
        
        frame();
    }
    //wasn't sure what to call a JFrame method, Object seems to work, 
    //so does returning frame, hope that's the best way to do it
    
    private static class frame(){
        ImageIcon adventure = new ImageIcon("C:\\Users\\Kyle\\"
                + "Desktop\\Programs\\Icons\\adventure.jpeg");
        JFrame frame = new JFrame();
        frame.setTitle("Spelling Adventure");
        frame.setVisible(true);     
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(1200, 760);
        frame.setLocationRelativeTo(null);
        JPanel panel = new JPanel();
        JButton button = new JButton("START");
        Font font = new Font("Serif", Font.BOLD, 30);
        button.setFont(font);
        button.addActionListener(new Action());
        button.setPreferredSize(new Dimension(150, 40));
        panel.setBackground(Color.red);
        panel.add(button);
        panel.add(new JLabel(adventure));
        frame.add(panel);
    }
    //executed when "Start" button is pressed 
    private static class Action implements ActionListener{
        public void actionPerformed (ActionEvent ev1){
            
        File folder = new File("Images/");
        ArrayList<String> previous = new ArrayList<>();
        //creates a list out of an array 
        ArrayList<String> imgNames = new ArrayList<>
        (Arrays.asList(folder.list()));    
        Object answer;
        String timePlay, spellingWord, word; 
        boolean check;
        //count keeps track of number of times through while loop, timeP1
        //is used to store converted string timePlay, choice is used to store 
        //random number which is used as an index call on array list imgNames
        int count = 0, score = 0, timeP1, numChoice, choice, randQuest;
        //ultimately selects random image to display
        Random rand = new Random();
        //if invalid input when asked for number of questions sets it random
        Random randQuestNum = new Random();
        //sets var to number of files in Images folder, used to set maximum 
        //number of questions asked, and the range of ints for random var
        numChoice = imgNames.size();
        //use this to set number of questions random if input fails in some way
        randQuest = randQuestNum.nextInt(numChoice);
               
        try{
            //asks user how many times they want to play
           timePlay = JOptionPane.showInputDialog(null, "How many times " 
           + "would you like to play the spelling game?", "Welcome to Spelling "
                + "Adventure", JOptionPane.QUESTION_MESSAGE);
           //handles nullpointer exceptions
           if(timePlay == null){              
               return;
           }
           //if no errors parse and store timePlay in timeP1
           else{
               timeP1 = Integer.parseInt(timePlay);
           }
        }
        //catches characters entered into dialog box, sets questions 
         catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Something went wrong! "
            + "Choosing random number of questions", 
            "Oops", JOptionPane.PLAIN_MESSAGE, 
			new ImageIcon("Icons/random.jpg"));
            timeP1 = randQuest;
        }
        //if a number of questions entered is greater than the number of files
        //sets number of questions asked to random
        if(timeP1 > numChoice){
            JOptionPane.showMessageDialog(null, "Something went wrong! "
            + "Choosing random number of questions", 
            "Oops", JOptionPane.PLAIN_MESSAGE, 
			new ImageIcon("Icons/random.jpg"));
            timeP1 = randQuest;
        }
        //same deal, if negative number is entered set to random
        else if(timeP1 < 0){
            JOptionPane.showMessageDialog(null, "Can't except negative numbers "
                   + "choosing random number of questions",                
                   "Whoops", JOptionPane.PLAIN_MESSAGE, 
				   new ImageIcon("Icons/random.jpg"));
            timeP1 = randQuest;
        }   
        while(count < timeP1){
                count++;        
            choice = rand.nextInt(numChoice);
            spellingWord = imgNames.get(choice);
            //checks to see if image has been used in the same playthrough
            check = previous.contains(spellingWord);
            //adds image file name to array, so it can be checked against next
            //playthrough
            previous.add(spellingWord);       
            if(check){
                //added to make sure correct number of questions are displayed
                count--;
            }
            else{
                //chops off the file type, used to check for correct answer
                //spelling the image file name right is key
                word = spellingWord.substring(0, spellingWord.indexOf('.'));
                //takes input from user and stores it in Object answer
                answer = JOptionPane.showInputDialog(null, "Spell What You See", 
                "Question " + count + " out of " + timeP1, 
                JOptionPane.PLAIN_MESSAGE, 
                new ImageIcon("Images/" + spellingWord), null, "");
                //handles nullpointexceptions 
                if(answer == null){               
                    break;
                    }
                //checks user input for correct spelling, converts to lowercase
                else{
                    if(answer.toString().toLowerCase().equals(word)){
                        //if answer is correct increase score
                       score++;
                       JOptionPane.showMessageDialog(null, "", "Great job!", 
                       JOptionPane.PLAIN_MESSAGE,
                       new ImageIcon("Icons/goodjob.gif"));
                    }
                    //if answer is incorrect show what they entered and correct
                    //spelling
                    else{
                        JOptionPane.showMessageDialog(null, 
                        "You entered:\n" + answer + "\n The correct spelling "
                         + "is\n "+ word , "Oops", JOptionPane.PLAIN_MESSAGE,
                        new ImageIcon("Icons/incorrect.png"));
                    }   
                }
            }
        }
        //displays goodbye message, how many right out of how many answered 
       JOptionPane.showMessageDialog(null, "You spelled " +
           + score + " out of " + count + " words correctly!\n"
               + "Great job! Thanks for the adventure!", 
           "Thanks for playing!", JOptionPane.PLAIN_MESSAGE,
           new ImageIcon("Icons/byefrog.png"));
    }
}
}
